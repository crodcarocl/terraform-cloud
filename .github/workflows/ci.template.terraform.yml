name: "Terraform Pipeline"

on:
  push:
    branches:
      - asdfd
  workflow_call:
  pull_request:

permissions:
  id-token: write
  contents: read

defaults:
  run:
    shell: bash

jobs:
  terraform:
    name: "Terrfaorm running on: ${{matrix.runner}} - for env: ${{ matrix.environment }}"
    runs-on: [ '${{ matrix.runner }}']
    timeout-minutes: 15
    strategy:
      max-parallel: 1
      matrix:
         include:
           - environment: development
             runner: ubuntu-latest
           - environment: quality
             runner: ubuntu-18.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Terraform Format
        id: fmt
        #run: terraform fmt -check
        run: echo "Soon! :D"

      - name: Terraform Init
        id: init
        run: terraform init -backend-config=${{ matrix.environment }}/backend.tfvars -upgrade=true -no-color -input=false
      
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::374632989470:role/GithubRole
          role-session-name: TerraformSession
          aws-region: us-east-1

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -input=false -var-file=${{ matrix.environment }}/terraform.tfvars -no-color
        continue-on-error: true

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            </details>
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false -var-file=${{ matrix.environment }}/terraform.tfvars